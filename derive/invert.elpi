/* Hide indexes using non-uniform parameters                                 */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{assert!, do!, map-i, map}.

namespace derive.invert {

type self term -> prop.

pred name-nu-params i:term, o:term.
name-nu-params (prod _ S T) (prod `idx` S T1) :- !,
  pi x\ name-nu-params (T x) (T1 x).
name-nu-params X X.

pred bo-param i:indt-decl, i:string, o:indt-decl.
bo-param (parameter N T D) Suffix (parameter N T D1) :-
  pi p\ decl p N T => bo-param (D p) Suffix (D1 p).

bo-param (inductive N 0 Arity Ks) Suffix (inductive Name NU Arity1 Ks1) :-
  Name is N ^ Suffix,
  name-nu-params Arity Arity1,
  bo-nu-param Arity Arity Ks Suffix NU Ks1.
 
pred bo-nu-param i:term, i:term, i:(term -> list indc-decl), i:string, o:int, o:(term -> list indc-decl).
bo-nu-param (sort _) Arity Ks Suffix 0 Ks1 :-
  pi i\ [ self i, pi l\ self (app[i,l]) ] => map (Ks i) (k-nu-ty Arity Suffix) (Ks1 i).
bo-nu-param (prod N S T) Arity Ks Suffix  NU Ks1 :-
  pi p\ decl p N S => bo-nu-param (T p) Arity Ks Suffix  NU1 Ks1,
  NU is NU1 + 1.

type nu-for  int -> term -> term -> prop.

pred k-nu-ty i:term, i:string, i:indc-decl, o:indc-decl.
k-nu-ty Arity Suffix (constructor N T) (constructor N1 T1) :-
  N1 is N ^ Suffix,
  k-un-ty.aux Arity 0 Arity T T1.
k-un-ty.aux (sort _) _ Arity T T1 :- k-ty T Arity T1.
k-un-ty.aux (prod N S T) UN Arity X (prod N S T1) :-
  UN1 is UN + 1,
  pi x\ decl x N S => nu-for UN x S => k-un-ty.aux (T x) UN1 Arity X (T1 x).

pred k-ty i:term, i:term, o:term.
k-ty (prod N S T) Arity (prod N S T1) :- not (self S), !,
  pi x\ decl x N S => k-ty (T x) Arity (T1 x). % FIXME: containers
k-ty (prod N (app[HD|ARGS]) T) Arity R :- self HD, !,
  mk-negative-sigma-close ARGS Arity Arity N HD T R.
k-ty (app[HD|ARGS]) _ R :-
  assert! (self HD) "derive.invert: weird constructor",
  map-i ARGS mk-eq-i EQNS,
  map-i ARGS mk-nu-var ARGS1,
  prod-eqn EQNS (app[HD|ARGS1]) R.

pred mk-negative-sigma-close i:list term, i:term, i:term, i:@name, i:term, i:(term -> term), o:term.
mk-negative-sigma-close [A|AS] (prod N S T) Arity N HD Rest R :-
  R = (prod N S x\ prod `_` {{ @Coq.Init.Logic.eq lp:S lp:A lp:x }} _\ R1 x),
  pi x\ decl x N S =>
    mk-negative-sigma-close AS (T x) Arity N {mk-app HD [x]} Rest (R1 x).
mk-negative-sigma-close [] _ Arity N HD T (prod N HD R) :-
  pi x\ decl x N HD => k-ty (T x) Arity (R x).

pred prod-eqn i:list term, i:term, o:term.
prod-eqn [] X X.
prod-eqn [E|ES] X (prod `_` E _\ R) :- pi e\ prod-eqn ES X R.

pred mk-eq-i i:int, i:term, o:term.
mk-eq-i I X {{ @Coq.Init.Logic.eq lp:PT lp:X lp:P }} :- nu-for I P PT.

pred mk-nu-var i:int, i:term, o:term.
mk-nu-var I _ P :- nu-for I P _.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred main i:@inductive, i:string, o:list prop.
main GR Suffix [Clause] :- do! [
  coq.env.indt GR Ind Lno Luno Arity Kn Kt,
  assert! (Ind = tt)   "derive.invert: Coinductive types are not supported",
  assert! (Lno = Luno) "derive.invert: Non-uniform parameters not supported",

  % we build the comparison function
  map Kn (k\ r\ sigma id\ coq.gr->id (indc k) id, r = pr k id) Kn1,
  coq.env.indt->decl (pr GR {coq.gr->id (indt GR)}) Ind Lno Luno Arity Kn1 Kt Decl,
  bo-param Decl Suffix R,
  std.assert-ok! (coq.typecheck-indt-decl R) "derive.invert generates illtyped term",
  coq.env.add-indt R Inv,

  Clause = invert-db GR Inv,
  coq.elpi.accumulate _ "derive.invert.db" (clause _ _ Clause)
].

}

% vim: set spelllang=:
