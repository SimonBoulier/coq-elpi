/* map over a container                                                      */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

param1-functor-db (app[indt GR1|A1]) (app[indt GR2|A2]) R :-
  coq.env.indt GR1 _ Lno1 _ _ _ _,
  coq.env.indt GR2 _ Lno2 _ _ _ _,
  {length A1} > Lno1, {length A2} > Lno2,
  split-at Lno1 A1 Args1 Points1,
  split-at Lno2 A2 Args2 Points2,
  Points1 = Points2, !,
  param1-functor-db {mk-app (indt GR1) Args1} {mk-app (indt GR2) Args2} F,
  mk-app F Points1 R.

namespace derive.param1.functor {

pred skip i:int. % position of a parameter that has to be skipped

% Building the body %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred bo-idx
  i:term, % inductive arity (input)
  i:term, % inductive type (input) applied to params & idx handled so far
  i:term, % inductive type (output) applied to params & idx handled so far
  i:int,  % current index no
  o:int, % Recno
  i:list term, % rev list of (output) parameters
  o:term, % body
  o:term. % type

bo-idx (prod _ S1 T1) Ity1 Ity2 N M Ps (lam `x` S1 Bo) (prod `x` S1 Ty) :- !,
  pi x\ sigma Ity1x Ity2x\
    mk-app  Ity1 [x]  Ity1x,
    mk-app  Ity2 [x]  Ity2x,
    N1 is N + 1,
    decl x `x` S1 => bo-idx (T1 x) Ity1x Ity2x N1 M Ps (Bo x) (Ty x).

bo-idx (sort _) Ity1 Ity2 N N Ps (lam `x` Ity1 Bo) (prod `_` Ity1 _\ Ity2) :- !,
  @pi-decl `x` Ity1 x\
    build-match x Ity1 (bo-idx-rty Ps Ity2) (bo-k-args Ps) (Bo x).

bo-idx X Ity1 Ity2 N M Ps R1 R2 :- whd1 X X1, !,
  bo-idx X1 Ity1 Ity2 N M Ps R1 R2.

bo-idx-rty Ps ItyArgs _ Vs _ R :-
  rev Vs [_|IdxsRev],
  rev IdxsRev Idxs,
  safe-dest-app ItyArgs HD _,
  mk-app HD {append {rev Ps} Idxs} R.

bo-k-args ParamsRev K _ Args Tys R :-
  rev ParamsRev Params,
  safe-dest-app K (indc GR) _,
  coq.env.typeof-gr GR T, subst-prod Params T KT,
  (bo-k-args-aux {mk-app (indc GR) Params} Args Tys KT R),
  !. % the first combination that typechecks

bo-k-args-aux R [] [] _ R :- coq.typecheck R _.
bo-k-args-aux K [A|As] [T|Ts] (prod _ S Ty) R :-
  param1-functor-db T S F,
  mk-app F [A] FA,
  bo-k-args-aux {mk-app K [FA]} As Ts (Ty FA) R.
bo-k-args-aux K [A|As] [_|Ts] (prod _ _ Ty) R :- !,
  bo-k-args-aux {mk-app K [A]} As Ts (Ty A) R.
bo-k-args-aux K As Ts X R :- whd1 X X1, !,
  bo-k-args-aux K As Ts X1 R.


% Take in input a mapping function for each parameter (not to be skipped)
% and then do the fixpoint

pred bo-params
  i:int, % current parameter
  i:int, % number of parameters
  i:term, % inductive type (input) applied to parameters handled so far
  i:term, % inductive type (output) applied to parameters handled so far
  i:term, % inductive arity (input)
  i:term, % inductive arity (output)
  i:list term, % output parameters so far
  o:term. % map function

bo-params Lno Lno Ity1 Ity2 A1 _ Ps (fix `f` Recno Fty Bo) :- !,
  @pi-decl `rec` Fty f\
    param1-functor-db Ity1 Ity2 f =>
      bo-idx A1 Ity1 Ity2 0 Recno Ps (Bo f) Fty.

bo-params N Lno Ity1 Ity2 (prod A Sty1 Rty1) (prod _ _ Rty2) Ps R :- skip N, !,
  N1 is N + 1,
  R = (lam A Sty1 a\ Bo a),
  pi a\ sigma Ity1A Ity2A \
    mk-app Ity1 [a] Ity1A,
    mk-app Ity2 [a] Ity2A,
    param1-functor-db a a {{ fun x : lp:a => x }} =>
      decl a A Sty1 => bo-params N1 Lno Ity1A Ity2A (Rty1 a) (Rty2 a) [a|Ps] (Bo a).

bo-params N Lno Ity1 Ity2 (prod A Sty1 Rty1) (prod _ Sty2 Rty2) Ps R :-
  coq.name-suffix A 1 A1,
  coq.name-suffix A 2 A2,
  coq.name-suffix A "f" Af,
  N1 is N + 1,
  (pi a b f \ mk-map-ty a Sty1 b Sty2 (FAB a b) f _ (Clause a b f)),
  R = (lam A1 Sty1 a\ lam A2 Sty2 b\ lam Af (FAB a b) f\ Bo a b f),
  pi a b f\ sigma Ity1A Ity2A \
    mk-app Ity1 [a] Ity1A,
    mk-app Ity2 [b] Ity2A,
    Clause a b f =>
    decl a A1 Sty1 =>
    decl b A2 Sty2 =>
    decl f Af (FAB a b) =>
      bo-params N1 Lno Ity1A Ity2A (Rty1 a) (Rty2 b) [b|Ps] (Bo a b f).

map-pi (x\ []) [].
map-pi (x\ [X x| XS x]) [pi x\ X x | YS] :- map-pi XS YS.

pred mk-map-ty
 i:term, % input variable
 i:term, % and its type
 i:term, % output variable
 i:term, % an its type
 o:term, % type of a mapping function from input to output
 i:term, % map function (having the type above)
 o:int,  % arity of the predicate
 o:list prop. % param1-functor-db clause for map function
mk-map-ty A (prod _ SA T1) B (prod _ SB T2) (prod `x` SA x\ R x) F N C1 :-
  param1-functor-db SA SB Fa, !,
  (pi x\ sigma Ax Fx BFx \
    mk-app A [x] Ax, mk-app Fa [x] Fx, mk-app B [Fx] BFx,
    mk-map-ty Ax (T1 x) BFx (T2 BFx) (R x) {mk-app F [x]} M (C x),
    N is M + 1),
  map-pi C C1.
mk-map-ty A (prod _ S1 T1) B (prod _ _ T2) (prod `x` S1 x\ R x) F N C1 :-
  (pi x\ sigma Ax Bx \ mk-app A [x] Ax, mk-app B [x] Bx,
    mk-map-ty Ax (T1 x) Bx (T2 x) (R x) {mk-app F [x]} M (C x),
    N is M + 1),
  map-pi C C1.
mk-map-ty (app[X|XS] as A) _ (app[Y|YS] as B) _ (prod `x` A _\ B) (app [G|GS] as F) 0 [param1-functor-db PLA PLB PLF,param1-functor-db A B F] :-
  drop-last 1 XS LA,
  drop-last 1 YS LB,
  drop-last 1 GS LF,
  mk-app X LA PLA,
  mk-app Y LB PLB,
  mk-app G LF PLF.
mk-map-ty A _ B _ (prod `x` A _\ B) F 0 [param1-functor-db A B F].

% Build a clause %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred mk-clause
  i:int, % current parameter
  i:int, % number of parameters
  i:term, % inductive type (input)
  i:term, % inductive type (output)
  i:term, % arity of the inductive
  i:list prop, % premises of the clause
  i:term, % map function
  o:prop. % clause for param1-functor-db
mk-clause N N Ity1 Ity2 _ Todo Map (param1-functor-db Ity1 Ity2 Map :- Todo).
mk-clause N Lno Ity1 Ity2 (prod _ _ T) Todo Map (pi x\ C x) :- skip N, !,
  N1 is N + 1,
  pi x\ sigma Ity1x Ity2x Mapf\
    mk-app Ity1 [x] Ity1x,
    mk-app Ity2 [x] Ity2x,
    mk-app Map [x] Mapf,
    mk-clause N1 Lno Ity1x Ity2x (T x) Todo Mapf (C x).
mk-clause N Lno Ity1 Ity2 (prod _ _ T) Todo Map (pi x y f\ C x y f) :- !,
  N1 is N + 1,
  pi x y f\ sigma Ity1x Ity2y Mapf\
    mk-app Ity1 [x] Ity1x,
    mk-app Ity2 [y] Ity2y,
    mk-app Map [x,y,f] Mapf,
    mk-clause N1 Lno Ity1x Ity2y (T x) [param1-functor-db x y f|Todo] Mapf (C x y f).
mk-clause N Lno Ity1 Ity2 X Todo Map C :- whd1 X X1, !,
  mk-clause N Lno Ity1 Ity2 X1 Todo Map C.

% We want to know if a parameter occurs in the type of an index %%%%%%%%%%%%%
pred skip-analysis
 i:int, % current parameter
 i:int, % number of parameters
 i:term, % arity of the inductive
 i:list (pair term int), % parameters bound so far and their position
 o:list prop. % made of skip

skip-analysis N P T L S :- whd1 T T1, !, skip-analysis N P T1 L S.
skip-analysis N N Arity Params ToSkip :- !,
  mk-skiplist Params Arity ToSkip.
skip-analysis N P (prod _ _ T) Params ToSkip :- !,
  M is N + 1,
  pi x\ skip-analysis M P (T x) [pr x N|Params] ToSkip.

mk-skiplist [] _ [].
mk-skiplist [pr V N|Params] Arity ToSkip :-
  if (occurs V Arity)
     (ToSkip = [skip N|ToSkip1])
     (ToSkip = ToSkip1),
  mk-skiplist Params Arity ToSkip1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
main T Suffix C :- do! [
  assert (T = indt GR) "derive.param1.functor: not an inductive type",
  coq.env.indt GR _Ind Lno Luno Arity _ _,
  assert (Lno = Luno) "derive.param1.functor: Non-uniform parameters not supported",

  % we pre compute the list of parameters that we won't map
  skip-analysis 0 Lno Arity [] SkipList,

  % generate map and add to the env
  SkipList => bo-params 0 Lno T T Arity Arity [] R,
  coq.typecheck R Rty,
  Name is {coq.gr->id GR} ^ Suffix,
  coq.env.add-const Name R Rty ff Funct,

  % generate clause and add to the db
  SkipList => mk-clause 0 Lno T T Arity [] Funct Clause,
  coq.elpi.accumulate "derive.param1.functor.db" (clause _ _ Clause),
  C = [Clause]
].
  
}
