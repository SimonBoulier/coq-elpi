
/* Boolean congruence lemmas                                                 */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive.bcongr {

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% take in input all hyps

% links an assumption to the two terms being compared and the boolean value
% for them:   forall x y b (H : reflext (x = y) b), ----> (arg H x y b)
type arg term -> term -> term -> term -> arg.

pred bo-args i:term, i:term, i:term, i:list arg, o:term.

bo-args (prod N S T) K1 K2 Hs (lam `x` S x\ lam `y` S y\ lam `b` {{bool}} b\ R x y b) :- !,
  @pi-decl `x` S x\
  @pi-decl `y` S y\
  @pi-decl `b` {{ Coq.Init.Datatypes.bool }} b\
  @pi-decl Hn (TH x y b) h\
  do! [
    TH x y b = {{ lib:elpi.reflect (@eq lp:S lp:x lp:y) lp:b }},
    R x y b = (lam `h` (TH x y b) h\ Body x y b h),
    coq.name-suffix `h` N Hn,
    bo-args (T x) {mk-app K1 [x]} {mk-app K2 [y]} [arg h x y b|Hs]
      (Body x y b h)
  ].

bo-args T K1 K2 HsRev Bo :- (T = indt _ ; T = app[indt _|_]), !,
  rev HsRev Hs,
  mk-conj Hs Conj,
  Concl = {{ lib:elpi.reflect (@Coq.Init.Logic.eq lp:T lp:K1 lp:K2) lp:Conj }},
  elim-all 0 Hs Concl Bo.

bo-args T K1 K2 HsRev Bo :- whd1 T T1, !, bo-args T1 K1 K2 HsRev Bo.

mk-conj [] {{ lib:elpi.true }}.
mk-conj [arg _ _ _ X] X :- !.
mk-conj [arg _ _ _ X|XS] {{ Coq.Init.Datatypes.andb lp:X lp:C }} :-
  mk-conj XS C.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% we case split on each and every assumption (arg H _ _ _)

elim-all _ [] {{ lib:elpi.reflect lp:P lp:_}}
              {{ lib:elpi.ReflectT lp:P (@eq_refl lp:T lp:LHS) }} :-
  safe-dest-app P _ [T,LHS,_].

elim-all N [arg H X Y B|Hs] P R :-
  decl H _ TH,
  (pi x b\ copy Y x => copy B b => copy P (Pxb x b)), !,
  build-match H TH (otyR Pxb Y) (branchR Pxb X Y N Hs) R.

otyR F X _ [Idx,_] _ R :-
  R = F X Idx.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Two branch per hyp: ReflectT or Reflect F
 
% we continue
branchR Pxb X _ N Hs K _ [E] [ET] R :-
  safe-dest-app K {{ lib:elpi.ReflectT }} _, !,
  build-match E ET (otyE Pxb {{ lib:elpi.true}}) (branchE (Pxb X {{ lib:elpi.true }}) N Hs) R.

branchE P N Hs _ _ [] [] R :- M is N + 1, elim-all M Hs P R.

% we stop, emit ReflectF and prove false via injection
branchR Pxb _ Y N _ K _ [NE] [_] R :-
  safe-dest-app K {{ lib:elpi.ReflectF }} _, !,
  Pxb Y {{ lib:elpi.false}} = {{ lib:elpi.reflect lp:P lp:_ }},
  R = {{ lib:elpi.ReflectF lp:P lp:PNE }},
  PNE = (lam `h` P h\ app[NE, Inj h]),
  @pi-decl `h` P h\ do! [
     ltac.injection h P _ (PEs h),
     nth N (PEs h) (Inj h) ].

otyE F B _ [X,_] _ R :-
  R = F X B.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% we take in input all parameters

pred bo-param i:int, i:term, i:term, o:term.

bo-param 0 K T R :- !, bo-args T K K [] R.
bo-param N K (prod Name Src T) (lam Name Src T1) :- N > 0, !,
  M is N - 1,
  @pi-decl Name Src x\
    bo-param M {mk-app K [x]} (T x) (T1 x).

bo-param N K T R :- whd1 T T1, !, bo-param N K T1 R.
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% for each constructor we generate the congruence lemma

pred main-constructor i:int, i:string, i:term, i:term, o:prop.
 
main-constructor Lno Prefix (indc GR as Kn) Kt Clause :- do! [
  % we build the comparison function
  bo-param Lno Kn Kt R,
  assert (coq.typecheck R RT) "derive.bcongr: illtyped term",
  Name is Prefix ^ {coq.gr->id GR},
  coq.env.add-const Name R RT @opaque! Cong,

  % we register it as a clause
  Clause = (bcongr-db (indc GR) Cong :- !),
  coq.elpi.accumulate "derive.bcongr.db"
    (clause _ (before "bcongr-db:fail") Clause)
].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

main T Prefix Clauses :- do! [
  assert (T = indt GR) "derive.bcongr: Not an inductive type",
  coq.env.indt GR Ind Lno _ _ Kns Ktys,
  assert (Ind = tt)   "derive.bcongr: Coinductive types are not supported",

  map2 Kns Ktys (main-constructor Lno Prefix) Clauses
].

}

% vim: set spelllang=:
