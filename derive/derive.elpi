/* Entry point for all derivations                                           */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive {

pred chain i:list (list prop -> prop).
:if "DBG:derive" chain [X|_] :- coq.say {counter "run"} X, fail.
chain [].
chain [F|FS] :-
  coq.say "Derivation: " F,
  (stop :- !, fail) => F C, !,
  C => chain FS.
chain [F|FS] :- coq.say "Derivation fails: " F, chain FS.

pred on_param1 i:inductive, i:(inductive -> string -> list prop -> prop), i:string, o:list prop.
on_param1 T F N C :- reali (global (indt T)) (global (indt P)), !, F P N C.

pred main i:inductive, i:string.
main T Prefix :- 
  chain [
    derive.isK.main T                      {calc (Prefix ^ "isk_")},
    derive.map.main T                      {calc (Prefix ^ "map")},
    derive.projK.main T                    {calc (Prefix ^ "getk_")},
    derive.param1.main (indt T)            {calc (Prefix ^ "is_")},
    on_param1 T derive.param1.congr.main   "congr_",
    on_param1 T derive.param1.inhab.main   "_full",
    on_param1 T derive.param1.trivial.main "_trivial",
    on_param1 T derive.param1.functor.main "_functor",
    derive.induction.main T                {calc (Prefix ^ "induction")},
    derive.eq.main T                       {calc (Prefix ^ "eq")},
    derive.bcongr.main T                   {calc (Prefix ^ "bcongr_")},
    derive.eqK.main T                      {calc (Prefix ^ "eq_axiom_")},
    derive.eqcorrect.main T                {calc (Prefix ^ "eq_correct")},
    derive.eqOK.main T                     {calc (Prefix ^ "eq_OK")},
    derive.param2.main (indt T)            {calc (Prefix ^ "_R")},
  ].
  
}
