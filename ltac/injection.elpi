/* core of injection                                                         */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

shorten std.{append, drop, length, do!}.

namespace ltac.injection {

pred arg-i i:int, i:int, i:term, i:@inductive, i:list term, i:int, i:@constructor, i:list term,  i:term,  i:term,  i:term, o:list term.
arg-i MAX MAX _ _ _ _ _ _ _ _ _ [] :- !.
arg-i J MAX EQF GR TyArgs Pno GRK KArgs A B H R :- J < MAX,
  I is J + 1,
  if (projK-db GRK I Proj) (do! [
      drop Pno KArgs Defaults,
      mk-app Proj {append TyArgs Defaults} Projector,
      mk-app (global (indt GR)) TyArgs Ty,
      coq.typecheck Projector (prod _ _ _\Ty2) ok, % FIXME whd
      mk-app EQF [Ty,Ty2,Projector,A,B,H] P,
      R = [P|RS]
  ]) (R = RS),
 arg-i I MAX EQF GR TyArgs Pno GRK KArgs A B H RS.

}

namespace ltac {

% Tests if the command can be applied
pred injection? i:term,
  o:@inductive, o:list term, o:@constructor, o:list term, o:term, o:term.
injection? Ty GR TyArgs GRK KArgs A B :- do! [
  whd Ty [] {{lib:@elpi.eq}} [T,A,B],
  whd T  [] (global (indt GR)) TyArgs,
  whd A  [] (global (indc GRK)) KArgs,
  whd B  [] (global (indc GRB)) _,
  GRK = GRB
].

% Does the job
pred injection! i:term, o:list term,
  i:@inductive, i:list term, i:@constructor, i:list term, i:term, i:term.
injection! H PL GR TyArgs GRK KArgs A B :- do! [
  coq.env.indt GR _ Pno _ _ _ _,
  length KArgs Argsno,
  Eqno is Argsno - Pno,
  ltac.injection.arg-i 0 Eqno {{lib:@elpi.eq_f}} GR TyArgs Pno GRK KArgs A B H PL
].

% Main entry point with assertion that H can be injected
pred injection i:term, i:term, i:term, o:list term.
injection H EqAB _ PL :-
  if (injection? EqAB    GR TyArgs  GRK KArgs  A B)
     (injection! H PL    GR TyArgs  GRK KArgs  A B)
     (coq.error "injection:" {coq.term->string H} "of type"
                {coq.term->string EqAB} "does not equate equal constructors").

}

% vim:set ft=lprolog spelllang=:
