(* coq-elpi: Coq terms as the object language of elpi                        *)
(* license: GNU Lesser General Public License Version 2.1 or later           *)
(* ------------------------------------------------------------------------- *)

DECLARE PLUGIN "elpi_plugin"

{

open Stdarg
open Ltac_plugin

open Gramlib

open Pcoq.Constr
open Pcoq.Prim

module EV = Coq_elpi_vernacular
module U = Coq_elpi_utils

(* Arguments ************************************************************* *)
let pr_elpi_string _ _ _ (s : Elpi.API.Ast.Loc.t * string) = Pp.str (snd s)

let trim_loc loc =
  let open Loc in
  { loc with bp = loc.bp + 1; ep = loc.ep - 1 }

let idents_of loc s =
  let s = String.sub s 1 (String.length s - 2) in
  let l = Str.(split (regexp "[\t \n]+") s) in
  List.iter (fun x -> if not (CLexer.is_ident x) then raise Stream.Failure) l;
  Coq_elpi_utils.of_coq_loc (trim_loc loc), l

let rec strip_curly loc s =
  if s.[0] = '\123' then strip_curly (trim_loc loc) String.(sub s 1 (length s - 2))
  else Coq_elpi_utils.of_coq_loc loc, s
let rec strip_round loc s =
  if s.[0] = '(' then strip_round (trim_loc loc) String.(sub s 1 (length s - 2))
  else Coq_elpi_utils.of_coq_loc loc, s
let rec strip_square loc s =
  if s.[0] = '[' then strip_square (trim_loc loc) String.(sub s 1 (length s - 2))
  else Coq_elpi_utils.of_coq_loc loc, s

}

ARGUMENT EXTEND elpi_string PRINTED BY { pr_elpi_string }
| [ "xxxxxxxx" ] -> { (Elpi.API.Ast.Loc.initial "dummy", "") }   (* XXX To be removed when maxime's patches gets merged *)
END
GRAMMAR EXTEND Gram GLOBAL: elpi_string;
elpi_string : [
  [ s = QUOTATION "lp:" -> {
    if s.[0] = '\123' then strip_curly loc s
    else if s.[0] = '(' then strip_round loc s
    else if s.[0] = '[' then strip_square loc s
    else Coq_elpi_utils.of_coq_loc loc, s
  }
  | s = STRING -> {
    Coq_elpi_utils.of_coq_loc loc, s
  }
  ]];
END

{
let pr_fp _ _ _ (_,x) = EV.pr_qualified_name x
}

ARGUMENT EXTEND qualified_name PRINTED BY { pr_fp }
| [ "xxxxxxxx" ] -> { Ploc.dummy, [] }   (* XXX To be removed when maxime's patches gets merged *)
END
GRAMMAR EXTEND Gram GLOBAL: qualified_name;
qualified_name : [[ i = IDENT; s = LIST0 FIELD -> { loc, i :: s } ]];
END

(* Anti-quotation ******************************************************** *)
{
let pr_elpi_code _ _ _ (s : Elpi.API.Ast.Loc.t * string) = Pp.str (snd s)
}

ARGUMENT EXTEND elpi_code
    PRINTED BY { pr_elpi_code }
| [ "xxxxxxx" ] -> { Elpi.API.Ast.Loc.initial "(dummy elpi code)", "" } (* XXX To be removed when maxime's patches get merged 
*)
END
{
let () = Coq_elpi_glob_quotation.is_elpi_code :=
           (fun x -> Genarg.(has_type x (glbwit wit_elpi_code)))
let () = Coq_elpi_glob_quotation.get_elpi_code :=
           (fun x -> Genarg.(out_gen (glbwit wit_elpi_code) x))

let pr_elpi_code_appArg _ _ _ (s : Elpi.API.Ast.Loc.t * string list) = Pp.prlist Pp.str (snd s)
}

ARGUMENT EXTEND elpi_code_appArg 
  PRINTED BY { pr_elpi_code_appArg } 
  | [ "xxxxxxx" ] -> { Elpi.API.Ast.Loc.initial "(dummy_elpi_appArg)", [] } (* XXX To be removed when maxime's patches get merged 
*)
END
{

let () = Coq_elpi_glob_quotation.is_elpi_code_appArg  :=
           (fun x -> Genarg.(has_type x (glbwit wit_elpi_code_appArg )))
let () = Coq_elpi_glob_quotation.get_elpi_code_appArg  :=
           (fun x -> Genarg.(out_gen (glbwit wit_elpi_code_appArg ) x))

}
GRAMMAR EXTEND Gram
  GLOBAL: operconstr;

  operconstr: LEVEL "0"
    [ [ s = QUOTATION "lp:" -> 
        { 
          let arg =
            if s.[0] = '('
            then Genarg.in_gen (Genarg.rawwit wit_elpi_code_appArg) (idents_of loc s)
            else if s.[0] = '\123'
            then Genarg.in_gen (Genarg.rawwit wit_elpi_code) (strip_curly loc s)
            else Genarg.in_gen (Genarg.rawwit wit_elpi_code) (Coq_elpi_utils.of_coq_loc loc,s) in
          CAst.make ~loc
            (Constrexpr.CHole (None, Namegen.IntroAnonymous, Some arg)) } ]
          ]
  ;
END

GRAMMAR EXTEND Gram
  GLOBAL: operconstr;

  operconstr: LEVEL "0"
    [ [ "lib"; ":"; id = qualified_name -> {
          let ref = Coqlib.lib_ref (String.concat "." (snd id)) in
          let path = Nametab.path_of_global ref in
          CAst.make ~loc Constrexpr.(CRef (Libnames.qualid_of_path ~loc:(fst id) path,None)) }
      | "lib"; ":"; "@"; id = qualified_name -> {
          let ref = Coqlib.lib_ref (String.concat "." (snd id)) in
          let path = Nametab.path_of_global ref in
          let f = Libnames.qualid_of_path ~loc:(fst id) path in
          CAst.make ~loc Constrexpr.(CAppExpl((None,f,None),[])) } ] ]
  ;
END

(* Syntax **************************************************************** *)
{
let pr_glob_constr_and_expr = function
  | (_, Some c) ->
    let env = Global.env () in
    let sigma = Evd.from_env env in
    Ppconstr.pr_constr_expr env sigma c
  | (c, None) -> Printer.pr_glob_constr_env (Global.env ()) c

let pp_elpi_arg _ _ _ = EV.pr_arg (fun (_,x) -> pr_glob_constr_and_expr x)
let pp_glob_elpi_arg _ _ _ = EV.pr_arg pr_glob_constr_and_expr
let pp_raw_elpi_arg env sigma _ _ _ = EV.pr_arg @@ Ppconstr.pr_constr_expr env sigma

let glob_elpi_arg = EV.glob_arg
let interp_elpi_arg = EV.interp_arg
let subst_elpi_arg mod_subst = function
  | EV.Qualid _ as x -> x
  | EV.DashQualid _ as x -> x
  | EV.Int _ as x -> x
  | EV.String _ as x -> x
  | EV.Term t ->
      EV.Term (Tacsubst.subst_glob_constr_and_expr mod_subst t)
  | EV.Telescope t ->
      EV.Telescope (Tacsubst.subst_glob_constr_and_expr mod_subst t)

let telescope = Pcoq.Entry.create "elpi:telescope"

}

GRAMMAR EXTEND Gram
  GLOBAL: telescope;

  telescope:
    [ [ ":"; bl = binders; OPT ";" -> {
       Constrexpr_ops.mkProdCN ~loc bl (CAst.make ~loc @@ Constrexpr.CSort Glob_term.GProp) } ] ]
  ;

END

ARGUMENT EXTEND elpi_arg
PRINTED BY { pp_elpi_arg }
INTERPRETED BY { interp_elpi_arg }
GLOBALIZED BY { glob_elpi_arg }
SUBSTITUTED BY { subst_elpi_arg }
RAW_PRINTED BY { pp_raw_elpi_arg env sigma }
GLOB_PRINTED BY { pp_glob_elpi_arg }
| [ qualified_name(s) ] -> { EV.Qualid (snd s) }
| [ "-" qualified_name(s) ] -> { EV.DashQualid (snd s) }
| [ string(s) ] -> { EV.String s }
| [ integer(n) ] -> { EV.Int n }
| [ telescope(t) ] -> { EV.Telescope t }
| [ constr(t) ] -> { EV.Term t }
END

VERNAC COMMAND EXTEND Elpi CLASSIFIED AS SIDEFF
| [ "Elpi" "Accumulate" "File" string_list(s) ] -> { EV.accumulate_files s }
| [ "Elpi" "Accumulate" "Files" string_list(s) ] -> { EV.accumulate_files s }
| [ "Elpi" "Accumulate" elpi_string(s) ] -> { EV.accumulate_string s }
| [ "Elpi" "Accumulate" qualified_name(p) "File" string_list(s) ] ->
  { EV.accumulate_files ~program:(snd p) s }
| [ "Elpi" "Accumulate" qualified_name(p) "Files" string_list(s) ] ->
  { EV.accumulate_files ~program:(snd p) s }
| [ "Elpi" "Accumulate" qualified_name(p) elpi_string(s) ] ->
  { EV.accumulate_string ~program:(snd p) s }
| [ "Elpi" "Accumulate" "Db" qualified_name(d) ] -> { EV.accumulate_db (snd d) }
| [ "Elpi" "Accumulate" qualified_name(p) "Db" qualified_name(d) ] ->
  { EV.accumulate_db ~program:(snd p) (snd d) }

| [ "Elpi" "Debug" string_list(s) ] -> { EV.debug s }
| [ "Elpi" "Trace" string_list(s) ] -> { EV.trace 1 max_int s [] }
| [ "Elpi" "Trace" string_list(s) "/" string_list(o) ] -> { EV.trace 1 max_int s o }
| [ "Elpi" "Trace" int(start) int(stop) string_list(s) ] -> { EV.trace start stop s [] }
| [ "Elpi" "Trace" int(start) int(stop) string_list(s) "/" string_list(o) ] -> { EV.trace start stop s o }

| [ "Elpi" "Trace" "Off" ] -> { EV.trace 0 0 [] [] }
| [ "Elpi" "Bound" "Steps" int(steps) ] -> { EV.bound_steps steps }

| [ "Elpi" "Print" qualified_name(p) string_list(s) ] -> { EV.print (snd p) s }

| [ "Elpi" "Program" qualified_name(p) elpi_string(s) ] ->
    { EV.create_program p ~init:s }
| [ "Elpi" "Command" qualified_name(p) ] ->
    { EV.create_command p }
| [ "Elpi" "Tactic" qualified_name(p) ] ->
    { EV.create_tactic p }
| [ "Elpi" "Db" qualified_name(d) elpi_string(s) ] ->
    { EV.create_db d ~init:s }

| [ "Elpi" "Query" elpi_string(s) ] ->
    { EV.run_in_program s }
| [ "Elpi" "Query"  qualified_name(p) elpi_string(s) ] ->
    { EV.run_in_program ~program:(snd p) s }
| [ "Elpi" qualified_name(p) elpi_arg_list(args) ] ->
    { EV.run_program (fst p) (snd p) args }

| [ "Elpi" "Typecheck" ] -> { EV.typecheck_program () }
| [ "Elpi" "Typecheck" qualified_name(p) ] -> { EV.typecheck_program ~program:(snd p) () }

| [ "Elpi" "HOAS" ne_string_list(s) ] -> { EV.load_hoas_def s }
| [ "Elpi" "Checker" string(s) ] -> { EV.load_checker s }
| [ "Elpi" "Printer" string(s) ] -> { EV.load_printer s }
| [ "Elpi" "CommandTemplate" string(s) ] -> { EV.load_command s }
| [ "Elpi" "TacticTemplate" string(s) ] -> { EV.load_tactic s }
END

TACTIC EXTEND elpi_tac
| [ "elpi" qualified_name(p) elpi_arg_list(args) ] ->
  { EV.run_tactic (fst p) (snd p) ist args }
| [ "elpi" "query" elpi_string(s) elpi_arg_list(args) ] ->
  { EV.run_in_tactic s ist args }
| [ "elpi" "query"  qualified_name(p) elpi_string(s) elpi_arg_list(args) ] ->
  { EV.run_in_tactic s ~program:(snd p) ist args }
  
END

(* vim:set ft=ocaml: *)
